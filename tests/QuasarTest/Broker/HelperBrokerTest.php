<?php

namespace QuasarTest\Broker;

use Quasar\Di\Container;

use Quasar\Broker\HelperBroker;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-24 at 22:11:08.
 */
class HelperBrokerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var HelperBroker
     */
    protected $object;

    protected $testNamespace = 'QuasarTest\Broker';
    
    protected $testNamespaces = array('QuasarTest\Broker', 'Quasar\View\Helper');

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $injector = new Container;
        $this->object = new HelperBroker($injector);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    /**
     * @covers Quasar\Broker\HelperBroker::addNamespace
     */
    public function testAddNamespace()
    {
        $namespace = $this->testNamespace;
        
        $this->assertSame($this->object, $this->object->addNamespace($namespace));
        $this->assertContains($namespace, $this->object->getNamespaces());
    }

    /**
     * @covers Quasar\Broker\HelperBroker::removeNamespace
     * @depends testAddNamespace
     */
    public function testRemoveNamespace()
    {
        $namespace = $this->testNamespace;
        
        $this->object->addNamespace($namespace);
        
        $this->assertSame($this->object, $this->object->removeNamespace($namespace));
        $this->assertNotContains($namespace, $this->object->getNamespaces());
    }

    /**
     * @covers Quasar\Broker\HelperBroker::setNamespaces
     */
    public function testSetNamespaces()
    {
        $namespaces = $this->testNamespaces;
        
        $this->assertSame($this->object, $this->object->setNamespaces($namespaces));
        $this->assertEquals($namespaces, $this->object->getNamespaces());
    }

    /**
     * @covers Quasar\Broker\HelperBroker::clearNamespaces
     * @depends testSetNamespaces
     */
    public function testClearNamespaces()
    {
        $namespaces = $this->testNamespaces;
        
        $this->object->setNamespaces($namespaces);
        
        $this->assertSame($this->object, $this->object->clearNamespaces());
        $this->assertEmpty($this->object->getNamespaces());
    }

    /**
     * @covers Quasar\Broker\HelperBroker::setInjector
     */
    public function testSetInjector()
    {
        $injector = new Container;
        $this->assertSame($this->object, $this->object->setInjector($injector));
        $this->assertSame($injector, $this->object->getInjector());
    }

    /**
     * @covers Quasar\Broker\HelperBroker::clearHelpers
     */
    public function testClearHelpers()
    {
        $this->assertSame($this->object, $this->object->clearHelpers());
        $this->assertEmpty($this->object->getHelpers());
    }
    
    /**
     * @covers Quasar\Broker\HelperBroker::addHelper
     * @depends testClearHelpers
     */
    public function testAddHelper()
    {        
        $this->object->clearHelpers();
        
        $helper = new TestHelper;
        $this->assertSame($this->object, $this->object->addHelper($helper));
        $this->assertSame($helper, $this->object->getHelper('TestHelper'));
    }

    /**
     * @covers Quasar\Broker\HelperBroker::addHelper
     * @depends testAddHelper
     */
    public function testAddHelperDoNotOverwrite()
    {
        $this->object->clearHelpers();
        
        $helper = new TestHelper;
        $otherHelper = new TestHelper;
        
        $this->object->addHelper($helper)
                     ->addHelper($otherHelper, false);
        
        $this->assertNotSame($otherHelper, $this->object->getHelper('TestHelper'));
    }

    /**
     * @covers Quasar\Broker\HelperBroker::addHelper
     * @depends testAddHelper
     */
    public function testAddHelperOverwrite()
    {
        $this->object->clearHelpers();
        
        $helper = new TestHelper;
        $otherHelper = new TestHelper;
        
        $this->object->addHelper($helper)
                     ->addHelper($otherHelper);
        
        $this->assertSame($otherHelper, $this->object->getHelper('TestHelper'));
    }

    /**
     * @covers Quasar\Broker\HelperBroker::getHelper
     * @depends testAddHelper
     */
    public function testGetHelper()
    {
        $helper = new TestHelper;
        $this->object->addHelper($helper);
        $this->assertInstanceOf('QuasarTest\Broker\TestHelper', $this->object->getHelper('TestHelper'));
    }
    
    /**
     * @depends testGetHelper
     * @depends testClearHelpers
     * @depends testSetNamespaces
     */
    public function testGetHelperFromNamespace()
    {
        $this->object
             ->clearHelpers()
             ->setNamespaces(array(
                $this->testNamespace
            ));
        
        $this->assertInstanceOf('Quasar\Broker\HelperInterface', $this->object->getHelper('TestHelper'));
    }
    
}
